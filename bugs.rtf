{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh14000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 0.5(-)There is some sort of latency meaning that any recorded sequence is about a beat and a half late, but apparently at the right tempo\
\
1 (+) loading and playing the \'91imported midi\'92 project, where the midi was generated in Musescore plays back as expected\
\
2(+)Playing back the project which is as above, but with an added \'91recorded\'92 layer doesn\'92t look that screamingly wrong tbh,\
\
3(.)Recording only shows \'91rest\'92 images after non-rest images have been shown. This is a pretty low priority as it could be considered a feature and will certainly be affected by any mono-poly switch \
\
4(-)The \'91play\'92 doesn\'92t obviously \'91auto stop\'92 and the \'91stop\'92 button remains active after all video and audio activity has stopped.\
\
5(-)Currently, sound playback uses vlc and garbles the first second of playback\
\
6(-)Currently, it appears that recording just isn\'92t working\
\
 A recent run the python runtime system multiprocessing resource_tracker threw this warning:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \CocoaLigature0 UserWarning: resource_tracker: There appear to be 1 leaked semaphore objects to clean up at shutdown\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \CocoaLigature1 7(-)need to work out the conditions under which this happens\
\
When pygame was installed (but not referenced) I saw segfaults announced like this:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \CocoaLigature0 Fatal Python error: pygame_parachute: (pygame parachute) Segmentation Fault\
Python runtime state: initialized\
\
This was occuring around the transportStop function \
\
When pygame was uninstalled, still saw segfaults, leading me to think that they were not caused by pygame, but that pygame merely reported them more verbosely:\
  Successfully uninstalled pygame-2.1.2\
Johns-iMac-2:AMENIC johnhollingum$ py amenic.py \
Segmentation fault: 11\
\
I don\'92t recall the conditions where the segfault happened, but it was probably at \'92stop\'92 time\
8(-) need to reproduce \
\
9(+)Currently the \'91imported midi\'92 project exports, with sound, exactly as expected to mp4\
\
10(-)Import audio. Select import audio again, but cancel. At least *appears* to lose the original imported audio\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \CocoaLigature1 \
Priorities (6) (7,8) (5) (0.5)\
\
Ok so right off, with no code changes, things are behaving differently from yesterday. The record process looks as though it\'92s working, but I\'92m getting a segfault on stop.\
\
Got consistency now. Import audio, import voice, assign voice to ch0 and set to listen. Press play and hit some keys, have the expected effect. Hit stop: segfault\
\
Playing the basic ticktest project, can play and stop with no issues.\
\
\
What happens at stop time when you have a listen channel Vs when you don\'92t?? \
\
Segfaults in makeChannelTimelines \
\
Loading a two-channel proj, it negotiates makeChannelTimelines OK.\
\
It\'92s also OK when recording an extra layer on a single-layer proj. It\'92s got to be some initialization that hasn\'92t happened (??)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 There\'92s an issue inside drawline. When it works, chanPixmaps is recognised as size 0 and initialized correctly. When it segfaults, the if len(chanPimaps) == 0 test fails. Maybe chanPixmaps is None or undefined?\
\
Bad alternative initialization of chanPixmaps \
\
6,7,8 fixed \
\
(5) problems with vlc look difficult to fix. Objections to pygame (which doesn\'92t have the problem were a) the code isn\'92t neat b) it can\'92t be stopped c) it causes segfaults. The last we know isn\'92t true, so the main objectioin is \'91can\'92t stop it\'92. Obvious thing would be to run it in a forked process that can be killed. Is that a pythonic way of doing it?\
\
5 fixed \
\
0.5 the MixerLag variable seems to work. what is the best way to calibrate it I\'92m not sure\
\
Y direction in chan pixmaps is counter-intuitive. and line too thick\
\
Clear doesn\'92t clear the old events from the midifile I think it *does* but the pixmap wasn\'92t cleared \
\
I\'92m also seeing an oddity in the timeline as it appears to be showing the gap between notes or something like that \
\
In record mixerLag seems \'85 ok but I\'92m missing the last note \
\
Managed to make the last note work by putting a big time delta on the last note off. This makes 0 sense to me. event times were shifted by one event in mp4out and playback (and timeline gen)\
** time is how long after the last event this event happens **\
\
if midi is imported with no voice assigned, crashes at play time \
Caused by attempting to render layers with no voice. Introduced layer mute control which is automatically applied if there is no voice on it, and can manually be applied to any layer with a voice and midi data. \
\
There are issues when there is no playable layer. Need a better playability check that stops playslot from being invoked\
\
All ok, but when proj file loaded, live chan is muted. when unmuted;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \CocoaLigature0 File "/Users/johnhollingum/Documents/AMENIC/amenic.py", line 888, in addNoteOff\
    self.board[msg.channel].pop(msg.note)\
KeyError: 0\
Abort trap: 6\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \CocoaLigature1  \
need to check channel no maybe? Same with \'91fromscratch\'92 and \'91imported midi\'92 projs. Works OK if mute flag NOT removed.\
\
1) load proj \'85  into layers \'85 unmute \'85 play \'85 ok\
\
2) load proj .. play \'85 plays only first event then continues running but with no events going out \
\
3) as previous(2), then stop, into layers, unmute save, play, OK \
\
4) load proj, into layers, no change, save, play, first event only, like 2 \
\
Can\'92t reproduce crash?? Removed debug line which afaik was the only change, still as above.\
\
So only bugs are:\
\
Playable channel loads muted (but unmutable) \
\
Muting doesn\'92t prevent send of first event \
\
Cancel on export voice crashes\
\
###\
\
Make 64 bar audio\
programatically analyse recorded file\
Check initial cueing and scaling \
Check timing on overdubs \
\
After successful record and save, play failed like below. Reloaded project played fine \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \CocoaLigature0   File "/Users/johnhollingum/Documents/AMENIC/amenic.py", line 2642, in cameraSlot\
    self.c.exposure()\
  File "/Users/johnhollingum/Documents/AMENIC/amenic.py", line 1169, in exposure\
    layers.append(self.render(ch,snap[ch]))\
  File "/Users/johnhollingum/Documents/AMENIC/amenic.py", line 1126, in render\
    l = self.layerFor(ch,n,nv[n],aTime)\
  File "/Users/johnhollingum/Documents/AMENIC/amenic.py", line 1054, in layerFor\
    self.imgCache[mapIndex][i[0]]= i[2] # cache[ch][note]= image\
IndexError: list index out of range\
Abort trap: 6\
\
The save is the cause of this error. In order to make the imageTable jsonable, it rips the actual image out of the table, leaving only the filename. I guess at save time we need to make a copy of the image table and rip the image out of the copy then json it.\
\
This error would occur with voice export too. Need to put a copy into jsonablevoice\
\
Cueing appears late
\f0\fs24 \cf0 \CocoaLigature1 \
\
with mixerlag of 0.16 seconds, initial cueing appears very good, but after 64 bars, my note_ons are consistently about 0.3s early \
\
Second test looks OK, according to accumulated ticks vs realtime calc, the last event was about 0.07s early. Maybe we need to go to 128 bars. But that 64 bar test was 2m14s so I think we\'92re OK to do a short demo. Around 0.7 early seems to be near the mark. Overdub track on existing recording seems to be quite late cued. I guess it\'92s because of the latency of starting up the midifile, but that should be measurable. Looks like a \'91playback artefact\'92 (at playback time, not record time). Seems ok in mpeg export. Maybe reduce the playback framerate.\
\
The qlineedit problem turns out to be an interaction between QT and moviepy. I\'92ve reported it as a moviepy bug, although it could just as easily be some kind of insecurity in QT. But always blame the lesser of the two, and I think in this case, qt is the lighthouse.\
\
Workaround is to have a command line argument that controls the loading of moviepy and access to the export function. Conversely access to the editing functions that require a sensible QlineEdit, namely editing voices. So an \'91e\'92 on the command line allows editing \
\
Clearing a channel clearly isn\'92t clearing. Probably easiest to figure out what\'92s going on by recording a simple example, saving, and examining the midi. Dang! test case isn\'92t doing it \
\
Sometimes fuzzy blob comes out as a hard-edged square. When. Why?\
\
If you edit the voice in any way, the image turns into a square during that session. Save, relaod and it looks OK\
\
Bad image re-cacheing on veditd save \
\
###\
\
Weird counter-intuitive inversion of paths\
\
a falling sweep goes down to lowest value then bounces back up to the top instead of staying at lowest\
\
Well it seems to be that, in the call to \'91getval\'92, the \'91ontime (param 2) stays the same for a while, then jumps forward by a second, and keeps changing - apparently following \'92now\'92 \
Value comes from nvn[0], nvn passed into layerfor as 3rd param\
Called from \'91render\'92 . render does this:\
\
		for n in nv.keys():\
			t = nv[n][0]\
			v = nv[n][1]\
			# so we have channel in ch, note in n and velocity in v\
			# and start time in t.\
			l = self.layerFor(ch,n,nv[n],aTime)\
\
The keys of nv are \
\
nv is the second param iin call to render, and, yes it\'92s the board snapshot for a particular channel.\
\
So is the board stime corrupt or is it happening soemwhere along that chain?\
\
What happens is that, at some stage, the snap is empty, at which point, render asks layerfor to generate the rest note. Not that there\'92s one defined for this voice. So two questions\
\
1) why does snap get emptied\
2) why does layerfor try to generate the non-existent rest note, or, probably more to the point, why does \
\
mostly confusion caused by a bug in overlayszopat \
\
###\
\
Need to look at what makes proj dirty in order to manage availability of \'92save\'92 vs \'91save as\'92\
\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\
\
\
}